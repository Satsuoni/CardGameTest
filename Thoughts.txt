Effect stack?
Step 1: Determine which effects still work - in order of addition
Note: effects are not destroyed by effects, though may be prevented from being applied
Effects that affect other effects have SCOPE_EFFECT tag
Step 2: Apply effects in loop, from older to newer, until no new effects can be applied

How do I check for conditions?

Do I write a simple language?
How is a card played?
1. choosing: effects that prevent objects from being chosen? Should be external to data, I guess. With possible additional conditions.
condition selectable left_arm_transformcard?
you can play card or ability
Ability is like a card thing
parametric conditionals..., with ellipsis (for tags)

Triggerable one-shots?

On-dismiss effects?
Do we allow additional refs after definition? in conditionals,etc
//let's say I want : if life played on right hand, move card to discard
conditional=effect
Atomic instruction blocks! _target
 _execute
type->name-> definition

redefine types? I guess avoid redefining and parametrics for now 
		

Conditions (do not allow extensions ):
Usage:
condition [string name] 
Internal keywords:
inverse :- inverts the result. needs var-tapping for numbers? var-tapping: <=

tag <string tag>
strcomp <string var_name> <string compare_to>
any <string list_name> <condition applied_to>
all <string list_name> <condition applied_to>
count <string list_name> <condition applied_to_list> <condition applied_to_count>
and {<condition 1>  <condition 2> <condition ...> }
or {<condition 1>  <condition 2> <condition ...> }
equal <string var_name> <float number>
less <string var_name> <float number>
greater <string var_name> <float number>
le <string var_name> <float number>
ge <string var_name> <float number>
true
command_type <string var_name> <string command>
command_arg <string var_name> <int argnum> <condition compare>
isset <string var_name>
self <string condition_name>
I need a "self" condition?

Operations/commands (target is implicit, stack[_target]):

tag_set <string val> <string tag>
tag_remove <string val> <string tag>
tag_switch <string val> <string tag_from> <string tag_to>
set <string var_name> <string object> //rewriting to set on stack
add <string var_name> <float val>
sub <string var_name> <float val>
mul <string var_name> <float val>
div <string var_name> <float val>
abort
continue
return <command return_value>
foreach <string list_name> {<list of commands>}
target <condition cond> <string list_name>
accumulate  <condition cond> <string list_name> <string assign_to>
clear <string stack_name>
hook <string hook_name> <string data_name>
choice <string choice_name> <string list_name> <string ret_name>
new <string var_name>
newlist <string var_name>
pop <string list_name> <string ret_value>
push <string list_name> <string value>
shift <string list_name> <string ret_value>
append <string list_name> <string value>
remove <string list_name> <string stack_name>
any <string list_name> <string ret_value>
while <condition cond> {<list of commands>}
condition_and <string val_name> <condition toadd>
condition_or <string val_name> <condition toadd>

insert <string to_insert> <string listname> <string varname> //inserts sorted by variable??

if <string var_name> <condition cond>  {<list of commands>}

execute <string stackvarname> <list commands>

Need execute...
Does it work on Stack as well?
I want an if XD

Special tags and values: 
EXECUTE_PREFIX
EXECUTE_POSTFIX
_count="_count";
_delay="_delay"; //timeline delay for Event
_target="_target";
_targetList="_targetList";
_value="_value";
_args="_arguments";
_effects="_effects";
_effect="_effect";
_parent="_parent";
_condition="_condition";
_commands="_commands";
_currentCommand="_currentCommand";
_returnValue="_returnValue";
_Game="_Game";
_Owner="_Owner";
 _Opponent="_Opponent";
 _Source="_Source";
 __stackValues={_Game,_Owner,_Opponent};
_template="_template";
 _cardName="_cardName";
 _cardText="_cardText";
_dr="<=";

TODO:
Dereference strings?

Root (_Game)  : |-
Up the condition hierarchy (or stack): <<
Dereference: <=
self: _


