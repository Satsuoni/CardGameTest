
function failEvent
{
 if _ condition { isset castSource }
 {
tag_remove castSource BUSY
tag_set castSource FREE
 }
 if _ condition { isset castEmitter }
 {
tag_remove castEmitter BUSY
tag_set castEmitter FREE
 }
 remove |-.Events _
} 
function addBinding
{
if _ condition { inverse isset <=binding }
{ newlist <=binding }  
tag_set _ ACCESS_BINDING
append <=binding _

}
conditional dismissRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition anyToDismiss
function _commands 
  {
  accumulate forDismissal _Game._Entities _dismissQueue
  foreach _dismissQueue
   {
   set _tmp <=_target
   tag_remove _target BODY
   tag_remove _target DISMISS_MARK
   tag_remove _target <=_target._Owner.dismissableTag
   foreach _target._addedRules
  {
  remove |-._effects _target
  remove |-._Entities _target
  } 
foreach _target._bindings
  {
  remove <=_target.binding _target
  remove |-._Entities _target
  } 
 accumulate isEventRelated  |-.Events remEvents
  foreach remEvents
  {
 hook nyah _ 
 execute _target <=|-.failEvent


  }
hook dismiss _ 
   sub _target._Owner.Energy <=_target._dismissCost
   remove _target._Owner.BODY _target
   accumulate hasFreeSlot _target._Owner.DEFAULT_BODY _putback
   set _tbo <=_target
   foreach _putback
{

 push _target._Owner.BODY _target
 tag_remove _target BUSY
 tag_set _target FREE
  tag_set _target BODY

}   
   shift _target._Owner.HAND _discard
   tag_switch _discard HAND DISCARD
   push _target._Owner.DISCARD _discard
   hook discard _discard
   push _target._Owner.HAND _target
   set _target.Energy 0
   tag_set _target HAND
   tag_remove _target BUSY
   tag_set _target FREE
   hook draw _target
   }
  clear _dismissQueue
 }
}

conditional drawRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition PlayerHands
function _commands
{
while PlayerHands
{
accumulate countHand _Game._Players _tmpl
foreach _tmpl
{

any _target.DECK _tmp
remove _target.DECK _tmp
push _target.HAND _tmp
tag_switch _tmp DECK HAND
hook draw _tmp

}
clear _tmpl }
}
}

conditional randomEnemyAction
{
condition _condition { isset |-.enemyPing }
function _commands
 {
 clear |-.enemyPing 
 set _target <=|-.Player2
 set _Owner <=_target

 accumulate condition {  tag  <=<<._target.activeTag } |-._Entities _toActivate

 if _ condition { count _toActivate condition { true } condition { greater _count 0  } }
  {
any _toActivate active

set |-.Player2.SELECTED <=active
set _SELECTED <=|-.Player2.SELECTED 
clear _sel
clear _seli
accumulate isTargetOfSelected _Game._Entities _seli
accumulate condition { inverse tag  DISMISS_AREA } _seli _sel
 if _ condition { inverse count _sel condition { true } condition { greater _count 0  } }
  {
clear |-.Player2.SELECTED 

 }
 if _ condition { count _sel condition { true } condition { greater _count 0  } }
{

any _sel targ
set |-.Player2.TARGETED <=targ
if |-.Player2.SELECTED condition { isset _targetCond }
{
 accumulate condition { self <<._SELECTED._targetCond } _Game._Entities _aim
 any _aim |-.Player2.AIMED
 }
hook act |-.Player2
 }
 }
 }
}

conditional activateRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition { inverse or { DidSelectCard } }
function _commands
{
foreach _Game._Players
{
set _tmp <=_target
clear _todeacc
accumulate condition { and { notActivatable condition { tag <=<<._target.activeTag } } } _target.HAND _todeacc
accumulate condition { and { notActivatable condition { tag <=<<._target.activeTag } } } _target.BODY _todeacc
foreach _todeacc
 {
 tag_remove _target <=_tmp.activeTag
 }
set _Owner <=_target
clear _toActivate
accumulate condition { and { Activatable condition { inverse tag <=<<._target.activeTag } } } _target.HAND _toActivate
accumulate condition { and { Activatable condition { inverse tag <=<<._target.activeTag } } } _target.BODY _toActivate
foreach _toActivate
 {

 tag_set _target <=_tmp.activeTag

 }
}

}
}


conditional ownRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition { any _Game._Players PlayerHasUnownedCards }
function _commands
{
accumulate PlayerHasUnownedCards _Game._Players _tmpl
foreach _tmpl
{
set _tmp <=_target
foreach _target.DECK
{
tag_set _target DECK
set _target._Owner <=_tmp
set _tcard <=_target
if _target condition { isset abilities }
 {
 foreach _target.abilities
  {
  set _target._Owner <=_tmp
  set _target._Source <=_tcard
  }
   foreach _target._addedRules
  {
  set _target._Owner <=_tmp
  set _target._Source <=_tcard
  }
 }
}
foreach _target.BODY
{
tag_set _target BODY
set _target._Owner <=_tmp
if _target condition { isset abilities }
 {
 foreach _target.abilities
  {
  set _target._Owner <=_tmp
  }
 }
}
clear _tmp
}
clear _tmpl
}
}


conditional idRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition PlayerIDs
function _commands
{
 accumulate hasNoID _Game._Players _tmpl
 foreach _tmpl
 {
 hook id _target
 }
 clear _tmpl
 }
}

conditional getMainPlayer
{
tag MAIN_RULE
tag INVIOLATE
condition _condition { inverse isset _Game.mainPlayer }
function _commands
{
choice getMainPlayer _Game._Players _Game.mainPlayer
}
}


conditional shuffleRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition PlayerDecks
function _commands
{
 accumulate countDeck _Game._Players _tmpl
 foreach _tmpl
 {
  set _tmp <=_target
  foreach _target.DISCARD
 {
 tag_remove _target DISCARD
 tag_set _target DECK
 push _tmp.DECK _target
 }
  clear _target.DISCARD
  newlist _target.DISCARD
  hook shuffle _target
 }
 clear _tmpl
}
}

condition playerReady
{
and
 {
 countHand
 hasID
 }
}

condition playersReady
{
all _Game._Players playerReady
}


condition mainPlayerCanPlay
{

and {
    playersReady
    condition  {  isset _Game.mainPlayer }

    }

}
condition activeAbility
{
and { condition { tag ABILITY }
      condition { tag HAND }
      condition { any _Owner.BODY condition{ and { condition {tag <=<<.sourceType } condition { tag FREE } } } }
      condition { self _hasTargets }
    }
}



condition bodyTransform
{
and {
condition { tag BODY }
condition { tag FREE }
condition { self _executeCondition }

}
}



conditional fillEntitiesRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition { any _Game condition { inverse tag ENTITIES_DONE }  }
function _commands
  {

  newlist _Game._Entities  
  foreach _Game._Players
   {
   push _Game._Entities  _target
   set _tmp <=_target
   foreach _target.DECK
     {
     push _Game._Entities  _target
     }
   foreach _target.DEFAULT_BODY
     {
     push _tmp.BODY _target
     push _Game._Entities  _target
     }
   }
  push _Game._Entities  |-.DistanceTicker 
  push _Game._Entities  |-.DistanceTickerMelee 
  push _Game._Entities  |-.DistanceTickerMid
  push _Game._Entities  |-.DistanceTickerFar
  push _Game._Entities  |-.Timeline 
  push _Game._Entities  |-.dismiss_area 
  set _Game.mainPlayer <=_Game.Player1
  tag_set _Game ENTITIES_DONE
  }
}



conditional deselectRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition DidSelectCard  
function _commands
  {
accumulate condition { isset SELECTED } _Game._Players _sel
foreach _sel
{
 set _tmp <=_target
clear _detarget
if _target.SELECTED condition { tag DESELECT } 
 {
 accumulate condition { tag <=<<._target.targetTag } _Game._Entities _detarget
foreach _detarget
 {
 tag_remove _target  <=_tmp.targetTag 
 }
 clear _detarget
 tag_remove _target.SELECTED DESELECT
clear  _target.SELECTED
clear  _target.TARGETED

 }

}
clear _sel
  }
 
}

conditional detargetRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition DidSelectCard  
function _commands
  {
accumulate condition { isset TARGETED } _Game._Players _sel
foreach _sel
{
 set _tmp <=_target
clear _deaim
if _target.TARGETED condition { tag DETARGET } 
 {
 accumulate condition { tag <=<<._target.aimTag } _Game._Entities _deaim
foreach _deaim
 {
 tag_remove _target  <=_tmp.aimTag 
 }
 clear _deaim
 tag_remove _target.TARGETED DETARGET

clear  _target.TARGETED

 }

}
clear _sel
  }
 
}


conditional highlightTargetsOfSelectedRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition DidSelectCardWithoutTarget
function _commands
  {
accumulate condition { isset SELECTED } _Game._Players _sel
 foreach _sel
 {
 set _tmp <=_target
 set _SELECTED <=_target.SELECTED
 set _Owner <=_target.SELECTED._Owner
 tag_set _target.SELECTED SEL
 clear _deacc
 accumulate condition { and { condition { tag <=<<._target.activeTag }  condition { inverse tag SEL } } }  _Game._Entities _deacc
  
 foreach _deacc
 {
 tag_remove _target <=_tmp.activeTag
 }

 tag_remove _target.SELECTED SEL
 clear _deacc
clear _detarget
 accumulate condition { tag <=<<._target.targetTag } _Game._Entities _detarget
 foreach _detarget
 {
 if _target condition { inverse or { isTargetOfSelected } }
  { tag_remove _target <=_tmp.targetTag }
 } 
 clear _detarget
 accumulate isTargetOfSelected _Game._Entities _sel
 if _ condition { count _sel condition { true } condition { le _count 0  }  }
{
tag_set _SELECTED DESELECT
}
 foreach _sel
 {
 tag_set _target <=_tmp.targetTag
 }
   clear _sel
   clear _tmp
   clear _SELECTED
  }
  }
}

conditional activateAbilityEmitterRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition anyEmmitterTargeted
function _commands
{
accumulate emitterTargeted _Game._Players _sel
foreach _sel
 {
 set _tmp <=_target
 
 accumulate condition { tag <=<<._target.targetTag } _Game._Entities _detarget
 foreach _detarget
 {
 tag_remove _target  <=_tmp.targetTag 
 }
 tag_set _target.TARGETED <=_target.activeTag 

 if _target condition { inverse tag MAIN_PLAYER }
 { tag_set _target EMITTER_HIGHLIGHTED }
 }
}
}

conditional highlightAbilityTargets
{
tag MAIN_RULE
tag INVIOLATE
condition _condition anyEmitterHighlighted
function _commands
{
accumulate emitterHighlighted _Game._Players _sel
foreach _sel
 {
 set _tmp <=_target
 if _target.SELECTED castableAbility
 {

  set _SELECTED <=_target.SELECTED
  set _Owner <=_target.SELECTED._Owner
  accumulate condition { self <<._SELECTED._targetCond } _Game._Entities _aim
 
  foreach _aim
   {
   tag_set _target <=_tmp.aimTag
   }
 }
}
}
}

function transform_cast
{
 
 accumulate condition { any <<.castSource condition { tag <=<<.slot } } castTarget._Owner.BODY _remFromBody
 foreach _remFromBody
 {
  tag_remove _target BODY
  tag_remove _target BUSY
  remove castTarget._Owner.BODY  _target
 }
 tag_remove castSource HAND
 remove castSource._Owner.HAND castSource
 tag_set castSource BODY
 tag_set castSource FREE
 tag_remove castSource BUSY
 push castSource._Owner.BODY castSource
 set castSource.Energy <=castSource._durability
 foreach castSource._addedRules
 {
 append |-._effects _target
 tag_set _target RULE
 append |-._Entities _target
 }
foreach castSource._bindings
{
execute _target <=|-.addBinding
append |-._Entities _target
}

 hook transformation _
}

conditional castTransformToBodyRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition isTransformCastPrepared
function _commands
  {
  accumulate isTransformCaster  _Game._Players _casters
  foreach _casters
  {
  set castPlayer <=_target.SELECTED._Owner
  sub castPlayer.Energy <=_target.SELECTED._castCost 
  clear event 
  new event
  set event._Owner <=_target.SELECTED._Owner
  set event.Delay 0
  set event.orDelay <=event.Delay
  set event.castSource <=_target.SELECTED
  set event.castTarget <=_target.TARGETED
  set event.func  <=|-.transform_cast
  tag_remove _target.TARGETED FREE
  tag_set _target.TARGETED BUSY
  tag_set _target.SELECTED BUSY
  insert event |-.Events Delay
  tag_set _target.SELECTED DESELECT
  clear _target.TARGETED
   }
 clear _casters
  }
}


function ability_cast_hand
{
 
 tag_remove castSource HAND
 remove castSource._Owner.HAND castSource
 tag_set castSource DISCARD
 tag_set castSource FREE
 tag_remove castSource BUSY
 tag_set castEmitter FREE
 tag_remove castEmitter BUSY
 push castSource._Owner.DISCARD castSource
 if castTarget condition { self <<.castSource._targetCond } {
 execute castTarget <=castSource._effects }
 hook ability _
}


conditional castAbilityRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition isAbilityCastPrepared
function _commands
  {
  accumulate isAbilityCaster  _Game._Players _casters
  foreach _casters
  {

  set castPlayer <=_target.SELECTED._Owner
  sub castPlayer.Energy <=_target.SELECTED._castCost 
  clear event 
  new event
  set event._Owner <=_target.SELECTED._Owner
  set event.Delay <=_target.SELECTED.delay
  set event.orDelay <=event.Delay
  set event.castSource <=_target.SELECTED
  set event.castEmitter <=_target.TARGETED
  set event.castTarget <=_target.AIMED
  set event.func  <=|-.ability_cast_hand
  tag_remove _target.TARGETED FREE

  tag_set _target.TARGETED BUSY
  tag_set _target.SELECTED BUSY
  insert event |-.Events Delay
  tag_set _target.SELECTED DESELECT
  tag_set _target.TARGETED DETARGET
  clear _target.AIMED
 
   }
 clear _casters
  }
}

conditional markDismissableRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition areTransformedBodyParts
function _commands
{
foreach |-._Players
 {
 set _plr <=_target
 foreach |-._Entities
 {
 if _target condition { inverse  or { isDismissableByPlr } }
 { tag_remove _target <=_plr.dismissableTag }
 if _target isDismissableByPlr
  { tag_set _target <=_plr.dismissableTag }
 }
 
 }
}
}

function ability_cast_transform
{
 
 tag_set castEmitter FREE
 tag_remove castEmitter BUSY

 if castTarget condition { self <<.castSource._targetCond }
 {

execute castTarget <=castSource._effects }

 hook ability _
}

conditional useTransformRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition isTransformUsePrepared
function _commands
  {
  accumulate isTransformUser  _Game._Players _casters
  foreach _casters
  {
clear _used
  accumulate targetedAbility _target.SELECTED.abilities _used
  hook testicle _

  pop _used _ability
  set castPlayer <=_target.SELECTED._Owner
  sub castPlayer.Energy <=_ability._castCost 
  clear event 
  new event
  set event._Owner <=_target.SELECTED._Owner
  set event.Delay <=_ability.delay
  
  set event.orDelay <=event.Delay
  set event.castSource <=_ability
  set event.castEmitter <=_target.SELECTED
  set event.castTarget <=_target.TARGETED
  set event.func  <=|-.ability_cast_transform
  tag_remove _target.SELECTED FREE
  tag_set _target.SELECTED BUSY
  insert event |-.Events Delay
  tag_set _target.SELECTED DESELECT
  clear _target.TARGETED

   }
 clear _casters
  }
}


function cleanupEntity
{
if _ condition { isset RULE }
{ remove |-._effects _ }

if _ condition { isset ACCESS_BINDING }
{ remove <=binding _ }
remove |-._Entities _

}


conditional updateTimeRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition { any _Game condition { tag UPDATE_TIME } }
function _commands
 {
 newlist cleanEvents
 foreach _Game.Events
 {
  set dtime <=_target._Owner.timeflow
  mul dtime <=_Game.deltaTime
  sub _target.Delay <=dtime
  if _target leDelayZero 
   {
   execute _target <=_target.func
   push cleanEvents _target
    }
 }


foreach cleanEvents
{
remove _Game.Events _target
}
clear cleanEvents
foreach _Game._Players
{

foreach _target.BODY
 {
  
 if _target hasMaintenance
  {
  set mcost <=_target._Owner.timeflow
  mul mcost <=_Game.deltaTime
  mul mcost <=_target._maintenanceCost
  sub _target._Owner.Energy <=mcost
  }
 }
}
foreach _Game._Entities
{
if _target condition { isset timeout }
 {
 set dtime <=_Game.deltaTime
 if _target condition { isset _Owner }
  { mul dtime <=_target._Owner.timeflow }
 sub _target.timeout <=dtime
 if _target condition { le timeout 0 }
  {
  execute _target <=|-.cleanupEntity
  }
 }
}
 tag_remove _Game UPDATE_TIME
 }
}


conditional defaultBodyDamagePropagationRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition { any |-._Entities rawBodyDamaged }
function _commands
 {
accumulate rawBodyDamaged |-._Entities _damaged
foreach _damaged
{
set damage 0
sub damage <=_target.Energy
set _target.Energy 0
sub _target._Owner.Energy <=damage

}

 }
}
conditional gameOverRule
{
tag MAIN_RULE
tag INVIOLATE
condition _condition { any |-._Players leEnergyZero }
function _commands
 {
 abort
 }
}
