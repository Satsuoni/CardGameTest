conditional CardSampleHead Transform
{
string _cardName "Sample Head"
string _cardText "This is example head
transform"
string _cardImage "bd"

tag SLOT_HEAD
tag ARTIFICIAL
tag ATTACK_BEAM
tag ATTACK_EDGE
float _castCost 10
float _maintenanceCost 1
float _dismissCost 40
float _durability 100

list _addedRules {
conditional __ 
{
tag RULE
tag EXECUTE_POSTFIX
 
 condition _condition {
 and {
 condition { command_type _currentCommand push }
 condition { strcomp _currentCommand.arg1 castSource }
 condition { any castSource condition { tag TRANSFORM } }
 condition { any castSource condition { tag BODY } }
 }
 }
 function _commands 
 {

 return add castSource._Owner.Energy 1000
 }
}
 }
condition _executeCondition { true }
list abilities {
 conditional ab1 Ability
{ 
 condition _targetCond { and { condition { inverse  strcomp <<._Owner.playerID <=_Owner.playerID }  condition { inverse tag CARD } condition { tag BODY } distance_melee  } }
float _castCost 4
float delay 1
function _effects { sub Energy 25 }
}
  }



}

conditional CardSampleLHand Transform
{
string _cardName "Sample Left Hand"
string _cardText "This is example LHand
transform"
string _cardImage "banan"

tag SLOT_LHAND
tag ARTIFICIAL
tag ATTACK_BLUNT
tag ATTACK_EDGE
float _castCost 5
float _maintenanceCost 1
float _dismissCost 5
float _durability 30

list _addedRules { }
condition _executeCondition { true }
list abilities {
 conditional ab1 Ability
{
 condition _targetCond { and {  condition { tag BODY } distance_midrange  } }
float _castCost 2
float delay 1
function _effects { sub Energy 20 }
}
  }



}


conditional CardSampleLegs Transform
{
string _cardName "Sample Legs"
string _cardText "This is example Legs"
string _cardImage "wmc"

tag SLOT_LLEG
tag SLOT_RLEG
int slots 2

tag BIOLOGICAL
tag ATTACK_BLUNT

float _castCost 5
float _maintenanceCost 1
float _dismissCost 50
float _durability 100

list _addedRules { }
condition _executeCondition { true }
list abilities {
 conditional ab1 Ability
{
 condition _targetCond { and {  condition { tag DISTANCE_TICKER }  } }
float _castCost 2
float delay 2
function _effects { set |-._distance <=distance }
}
  }



}

conditional SampleAbility Ability
{
float _castCost 10
string sourceType ATTACK_EDGE
float delay 5

function _effects {
sub Energy 50
 }
condition _targetCond { and { condition { inverse strcomp <<._Owner.playerID <=_Owner.playerID } condition { tag BODY } distance_melee } }


string _cardName "Sample Edge Ability"
string _cardText "This is example ability"
string _cardImage "bakabel"
}

